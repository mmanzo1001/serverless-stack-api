this is the root directory for the backend api project...

handler.js file contains actual code for the services/functions that will be deployed to AWS Lambda.

serverless.yml file contains the configuration on what AWS services Serverless will provision and how to configure them.

tests/ directory where we can add our unit tests.
------------------------cd
GIT: https://github.com/mmanzo1001/serverless-stack-api.git

GIT BACKEND: https://github.com/mmanzo1001/serverless-stack-client.git

TO GIT:
Initiatlize Repository
git init
git add .
git commit -m "First commit"
git remote add origin https://github.com/mmanzo1001/serverless-stack-client.git
git remote -v
git push -u origin master

Commit the Changes

git add .
git commit -m "Setting up our React app"
git push

-------------------------

steps: 
1. install serverless: npm install serverless -g
2. serverless install, this sets root sub-director: --url https://github.com/AnomalyInnovations/serverless-nodejs-starter --name lambda-app
3. In root > npm install
4. add packages for backend, allows talk to AWS services: npm install aws-sdk --save-dev
5. add packages for backend, allows uuid's to store to DynamoDV: npm install uuid --save
6. 



REMOVED FROM serverless.yml
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role

  Response statusCode: 500

If you see a statusCode: 500 response when you invoke your function, here is how to debug it. The error is generated by our code in the catch block. Adding a console.log like so, should give you a clue about what the issue is.

COPYcatch(e) {
  console.log(e);
  return failure({status: false});
}

Serverless: Stack update finished...
Service Information
service: lambda-app
stage: prod
region: us-east-1
stack: lambda-app-prod
resources: 43
api keys:
  None
endpoints:
  POST - https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod/notes
  GET - https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod/notes/{id}
  GET - https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod/notes
  PUT - https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod/notes/{id}
  DELETE - https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod/notes/{id}
  POST - https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod/billing
functions:
  create: lambda-app-prod-create
  get: lambda-app-prod-get
  list: lambda-app-prod-list
  update: lambda-app-prod-update
  delete: lambda-app-prod-delete
  billing: lambda-app-prod-billing
layers:
  None
Serverless: Run the "serverless" command to setup monitoring, troubleshooting and testing.


npx aws-api-gateway-cli-test --username mmanzo+test@gmail.com --password Test1234! --user-pool-id us-east-1_IdRtUtshE --app-client-id 48emebe8o02lq79ektpb07vnqr --cognito-region us-east-1 --identity-pool-id us-east-1:dc08904a-735e-4008-9b81-df6178be1bcc --invoke-url https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod --api-gateway-region us-east-1 --path-template /notes --method POST --body {"content":"hello world","attachment":"hello.jpg"}

npx aws-api-gateway-cli-test --username='mmanzo+test@gmail.com' --password='Test1234!' --user-pool-id='us-east-1_IdRtUtshE' --app-client-id='48emebe8o02lq79ektpb07vnqr' --cognito-region='us-east-1' --identity-pool-id='us-east-1:dc08904a-735e-4008-9b81-df6178be1bcc' --invoke-url='https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod' --api-gateway-region='us-east-1 --path-template='/notes' --method='POST' --body='{"content":"hello world","attachment":"hello.jpg"}'


npx aws-api-gateway-cli-test \
--username='mmanzo+test@gmail.com'\
--password='Test1234!' \
--user-pool-id='us-east-1_IdRtUtshE' \
--app-client-id='48emebe8o02lq79ektpb07vnqr' \
--cognito-region='us-east-1' \ 
--identity-pool-id='us-east-1:dc08904a-735e-4008-9b81-df6178be1bcc' \
--invoke-url='https://0wswag2e6j.execute-api.us-east-1.amazonaws.com/prod' \
--api-gateway-region='us-east-1 \
--path-template='/notes' \
--method='POST' \
--body='{"content":"hello world","attachment":"hello.jpg"}'

TO START APP: npm start





NEW NOTE . js

  //added file1 for new picker
  const file1 = useRef(null);

// multiple file change handler
  // removed first element '[0]' so we get all files
  function handleMultipleFileChange(event) {
    file1.current = event.target.files
    console.log( event.target.files );
  } 
  // async function handleMultipleFileChange(event) {
  //   this.setState({uploading: true});
    
  //   let files = [];
  //   for (var i=0; i<event.target.files.length; i++) {
  //     files.push(event.target.files.item(i));
  //   }
  //   await Promise.all(files.map(f => this.s3Upload(f)));

  //   this.setState({uploading: false});
  // }
  



 
        //DOES NOT WORK
        //file1.current is the file array from
        // const attachment = file1.current
        // let files = [];
        // for (var i=0; i<file.target.files.length; i++) {
        // files.push(file.target.files.item(i));
        // }
        // await Promise.all(files.map(f => s3Upload(f))); 
//DOES NOT WORK


      <form onSubmit={handleSubmit}>
        <FormGroup controlId="file1">
          <ControlLabel>Attachment-Multiple</ControlLabel>
          <FormControl onChange={handleMultipleFileChange} type="file" multiple />
        </FormGroup>
        <LoaderButton
          block
          type="submit"
          bsSize="large"
          bsStyle="primary"
          isLoading={isLoading}
          disabled={!validateForm()}
        >
          Create1
        </LoaderButton>
      </form>




Serverless deploy -v
OUTPUT WAS:
Serverless: Stack update finished...
Service Information
service: lambda-app2
stage: dev
region: us-east-1
stack: lambda-app2-dev
resources: 50
api keys:
  None
endpoints:
  POST - https://hdi97da847.execute-api.us-east-1.amazonaws.com/dev/notes
  GET - https://hdi97da847.execute-api.us-east-1.amazonaws.com/dev/notes/{id}
  GET - https://hdi97da847.execute-api.us-east-1.amazonaws.com/dev/notes
  PUT - https://hdi97da847.execute-api.us-east-1.amazonaws.com/dev/notes/{id}
  DELETE - https://hdi97da847.execute-api.us-east-1.amazonaws.com/dev/notes/{id}
  POST - https://hdi97da847.execute-api.us-east-1.amazonaws.com/dev/billing
functions:
  create: lambda-app2-dev-create
  get: lambda-app2-dev-get
  list: lambda-app2-dev-list
  update: lambda-app2-dev-update
  delete: lambda-app2-dev-delete
  billing: lambda-app2-dev-billing
layers:
  None

Stack Outputs